import { ThisExpression } from "typescript";


    
export class EventComponent extends Behaviour {    
    @serializeable(EventList)
    roomChanged: EventList = new EventList();
}

export class SocLoader extends Behaviour {    

    @serializeable(AssetReference) 
    scenes: Array<AssetReference> = [];
}
// class Test123 {}

export class Bla extends Behaviour
{
    myNumber:number = 42;
    myBool:boolean = true;
    myString:string = "test";
    numberArr: number[] = [1,2,3];
    myColor : THREE.Color = new THREE.Color(255, 0, 0);
    renderers = new Array<Renderer>();
    renderers2 : Renderer[] = [];
    objArr : object[];
    colArr: THREE.Color[] = [new THREE.Color(1,2,3)];
    map : Map<string> = new Map<string>();
    map2 : Map<object> = new Map<object>();
    private myThing : Test123;
} 

// //@type UnityEngine.MonoBehaviour
// export class ButtonObject extends Interactable implements IPointerClickHandler, ISerializable {

//     //@type UnityEngine.Transform[]
//     myType?: SceneFXWindow;
// }

// import { Behaviour } from "needle.tiny.engine/engine-components/Component";
// import { RoomEntity } from "./Room";

// import { Behaviour } from "needle.tiny.engine/engine-components/Component";

// export class MyNewScript extends DriveClient
// {
//     //@type test
//     texture : RenderTexture;  
// }    

// namespace Hello.World
// {
//     namespace Deep {
//         export class MyClass extends Behaviour {
//             //@ifdef TEST
//             public myFloat :number;
//         }
//     }
// }

// class OtherClass extends Behaviour {

// }

//@type (RoomEntity) 
// export class NavigationManager extends RoomEntity {

//     fl:number = 1;

//     nav_forward() {

//     }

//     nav_backward() { 

//     }
// }

// export abstract class NavComponent extends Behaviour {

//     abstract next();  
//     abstract prev();
//     abstract isAtEnd():boolean; 
// } 


// export class PointOfInterest extends Behaviour {

//     myVal:number = 12;
    
//     // @type(HELLO)
//     myFunction(){

//     }

//     // @type(UnityEngine.Camera)
//     view?:Camera;
//     test:string = "123";
//     // test
// }

// export class MaterialColorHandler extends Behaviour {

//     @serializeable(Renderer)
//     renderer?: Renderer[];
// }

// export class MyArray extends Behaviour {
    
//     arr? : Array<number> = [1,2,3];
// }

// export class PrivateSerializedField extends Behaviour {
    
//     //@serializeField
//     private color? : THREE.Color; 
// }
// export class MyPropertyClass extends Behaviour {
//     set color(col: THREE.Color) {
//     }
// }

// export class MyClassWithAFloat extends Behaviour {
//     myfloat:number = .5;
//     private myString : string;
// }

// export class GltfExport extends Behaviour {
//     binary: boolean = true;
//     "$serializedTypes" = {
//         url:null
//     }

//     // @contextmenu enable this
//     test(){

//     }
// }

// export class SetColor  extends Behaviour {

//     "@serializedTypes" = { 
//         col: Number,
//     }
// }

// class Behaviour {

// }

// export class PlatformerMusic extends Behaviour implements IPlaymodeChangeListener {
//     source?: AudioSource;
//     editMode?: string;
//     playMode?: string;

//     onPlaymodeChange(playmode: PlayMode): void {
//         console.log(this);
//         if(!this.source) return;
//         const clip = playmode.isInPlayMode ? this.playMode : this.editMode;
//         console.log("PLAY", clip);
//         this.source.play(clip);
//     }

// }

// // TODO: export UnityEvent like this
// // disable codegen
// class UnityEvent {
//     methods: Function[] = [];
//     invoke() {
//         for (const m of this.methods) {
//             m();
//         }
//     }
// }

// export class MyClass extends Behaviour {
//     myFloat: number = 15;
//     myBool: boolean;
//     // just some default values
//     myArray: number[] = [1, 2, 3];
//     // comment for myString
//     myString: string = "this is a string1";
//     myObject: THREE.Object3D;
//     myBool2: boolean;

//     myFunction() { }
//     myFunctionWithStringParameter(string: string) { }
//     myFunctionWithSomeObjectAndArray(obj: THREE.Object3D, arr: number[]) { }
//     myFunctionWithoutParamTypes(test) { }

//     someOtherStuff: THREE.Object3D[] | null = null;
//     myEvent: UnityEvent;
// }