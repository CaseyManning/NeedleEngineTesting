{
  "version": 3,
  "sources": ["../../../../Library/PackageCache/com.needle.engine@2.7.3-pre/package~/node_modules/three/examples/jsm/utils/WorkerPool.js", "../../../../Library/PackageCache/com.needle.engine@2.7.3-pre/package~/node_modules/three/examples/jsm/loaders/KTX2Loader.js"],
  "sourcesContent": ["/**\n * @author Deepkolos / https://github.com/deepkolos\n */\n\nexport class WorkerPool {\n\n\tconstructor( pool = 4 ) {\n\n\t\tthis.pool = pool;\n\t\tthis.queue = [];\n\t\tthis.workers = [];\n\t\tthis.workersResolve = [];\n\t\tthis.workerStatus = 0;\n\n\t}\n\n\t_initWorker( workerId ) {\n\n\t\tif ( ! this.workers[ workerId ] ) {\n\n\t\t\tconst worker = this.workerCreator();\n\t\t\tworker.addEventListener( 'message', this._onMessage.bind( this, workerId ) );\n\t\t\tthis.workers[ workerId ] = worker;\n\n\t\t}\n\n\t}\n\n\t_getIdleWorker() {\n\n\t\tfor ( let i = 0; i < this.pool; i ++ )\n\t\t\tif ( ! ( this.workerStatus & ( 1 << i ) ) ) return i;\n\n\t\treturn - 1;\n\n\t}\n\n\t_onMessage( workerId, msg ) {\n\n\t\tconst resolve = this.workersResolve[ workerId ];\n\t\tresolve && resolve( msg );\n\n\t\tif ( this.queue.length ) {\n\n\t\t\tconst { resolve, msg, transfer } = this.queue.shift();\n\t\t\tthis.workersResolve[ workerId ] = resolve;\n\t\t\tthis.workers[ workerId ].postMessage( msg, transfer );\n\n\t\t} else {\n\n\t\t\tthis.workerStatus ^= 1 << workerId;\n\n\t\t}\n\n\t}\n\n\tsetWorkerCreator( workerCreator ) {\n\n\t\tthis.workerCreator = workerCreator;\n\n\t}\n\n\tsetWorkerLimit( pool ) {\n\n\t\tthis.pool = pool;\n\n\t}\n\n\tpostMessage( msg, transfer ) {\n\n\t\treturn new Promise( ( resolve ) => {\n\n\t\t\tconst workerId = this._getIdleWorker();\n\n\t\t\tif ( workerId !== - 1 ) {\n\n\t\t\t\tthis._initWorker( workerId );\n\t\t\t\tthis.workerStatus |= 1 << workerId;\n\t\t\t\tthis.workersResolve[ workerId ] = resolve;\n\t\t\t\tthis.workers[ workerId ].postMessage( msg, transfer );\n\n\t\t\t} else {\n\n\t\t\t\tthis.queue.push( { resolve, msg, transfer } );\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.workers.forEach( ( worker ) => worker.terminate() );\n\t\tthis.workersResolve.length = 0;\n\t\tthis.workers.length = 0;\n\t\tthis.queue.length = 0;\n\t\tthis.workerStatus = 0;\n\n\t}\n\n}\n", "/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats. While KTX 2.0 also allows\n * other hardware-specific formats, this loader does not yet parse them.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nimport {\n\tCompressedTexture,\n\tFileLoader,\n\tLinearEncoding,\n\tLinearFilter,\n\tLinearMipmapLinearFilter,\n\tLoader,\n\tRGBAFormat,\n\tRGBA_ASTC_4x4_Format,\n\tRGBA_BPTC_Format,\n\tRGBA_ETC2_EAC_Format,\n\tRGBA_PVRTC_4BPPV1_Format,\n\tRGBA_S3TC_DXT5_Format,\n\tRGB_ETC1_Format,\n\tRGB_ETC2_Format,\n\tRGB_PVRTC_4BPPV1_Format,\n\tRGB_S3TC_DXT1_Format,\n\tsRGBEncoding,\n\tUnsignedByteType\n} from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\n\nconst KTX2TransferSRGB = 2;\nconst KTX2_ALPHA_PREMULTIPLIED = 1;\nconst _taskCache = new WeakMap();\n\nlet _activeLoaders = 0;\n\nclass KTX2Loader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.transcoderPath = '';\n\t\tthis.transcoderBinary = null;\n\t\tthis.transcoderPending = null;\n\n\t\tthis.workerPool = new WorkerPool();\n\t\tthis.workerSourceURL = '';\n\t\tthis.workerConfig = null;\n\n\t\tif ( typeof MSC_TRANSCODER !== 'undefined' ) {\n\n\t\t\tconsole.warn(\n\n\t\t\t\t'THREE.KTX2Loader: Please update to latest \"basis_transcoder\".'\n\t\t\t\t+ ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.'\n\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\tsetTranscoderPath( path ) {\n\n\t\tthis.transcoderPath = path;\n\n\t\treturn this;\n\n\t}\n\n\tsetWorkerLimit( num ) {\n\n\t\tthis.workerPool.setWorkerLimit( num );\n\n\t\treturn this;\n\n\t}\n\n\tdetectSupport( renderer ) {\n\n\t\tthis.workerConfig = {\n\t\t\tastcSupported: renderer.extensions.has( 'WEBGL_compressed_texture_astc' ),\n\t\t\tetc1Supported: renderer.extensions.has( 'WEBGL_compressed_texture_etc1' ),\n\t\t\tetc2Supported: renderer.extensions.has( 'WEBGL_compressed_texture_etc' ),\n\t\t\tdxtSupported: renderer.extensions.has( 'WEBGL_compressed_texture_s3tc' ),\n\t\t\tbptcSupported: renderer.extensions.has( 'EXT_texture_compression_bptc' ),\n\t\t\tpvrtcSupported: renderer.extensions.has( 'WEBGL_compressed_texture_pvrtc' )\n\t\t\t\t|| renderer.extensions.has( 'WEBKIT_WEBGL_compressed_texture_pvrtc' )\n\t\t};\n\n\n\t\tif ( renderer.capabilities.isWebGL2 ) {\n\n\t\t\t// https://github.com/mrdoob/three.js/pull/22928\n\t\t\tthis.workerConfig.etc1Supported = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tinit() {\n\n\t\tif ( ! this.transcoderPending ) {\n\n\t\t\t// Load transcoder wrapper.\n\t\t\tconst jsLoader = new FileLoader( this.manager );\n\t\t\tjsLoader.setPath( this.transcoderPath );\n\t\t\tjsLoader.setWithCredentials( this.withCredentials );\n\t\t\tconst jsContent = jsLoader.loadAsync( 'basis_transcoder.js' );\n\n\t\t\t// Load transcoder WASM binary.\n\t\t\tconst binaryLoader = new FileLoader( this.manager );\n\t\t\tbinaryLoader.setPath( this.transcoderPath );\n\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\n\t\t\tbinaryLoader.setWithCredentials( this.withCredentials );\n\t\t\tconst binaryContent = binaryLoader.loadAsync( 'basis_transcoder.wasm' );\n\n\t\t\tthis.transcoderPending = Promise.all( [ jsContent, binaryContent ] )\n\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\n\n\t\t\t\t\tconst fn = KTX2Loader.BasisWorker.toString();\n\n\t\t\t\t\tconst body = [\n\t\t\t\t\t\t'/* constants */',\n\t\t\t\t\t\t'let _EngineFormat = ' + JSON.stringify( KTX2Loader.EngineFormat ),\n\t\t\t\t\t\t'let _TranscoderFormat = ' + JSON.stringify( KTX2Loader.TranscoderFormat ),\n\t\t\t\t\t\t'let _BasisFormat = ' + JSON.stringify( KTX2Loader.BasisFormat ),\n\t\t\t\t\t\t'/* basis_transcoder.js */',\n\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\t\t\t\t\tthis.transcoderBinary = binaryContent;\n\n\t\t\t\t\tthis.workerPool.setWorkerCreator( () => {\n\n\t\t\t\t\t\tconst worker = new Worker( this.workerSourceURL );\n\t\t\t\t\t\tconst transcoderBinary = this.transcoderBinary.slice( 0 );\n\n\t\t\t\t\t\tworker.postMessage( { type: 'init', config: this.workerConfig, transcoderBinary }, [ transcoderBinary ] );\n\n\t\t\t\t\t\treturn worker;\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\tif ( _activeLoaders > 0 ) {\n\n\t\t\t\t// Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n\n\t\t\t\tconsole.warn(\n\n\t\t\t\t\t'THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.'\n\t\t\t\t\t+ ' Use a single KTX2Loader instance, or call .dispose() on old instances.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t_activeLoaders ++;\n\n\t\t}\n\n\t\treturn this.transcoderPending;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.workerConfig === null ) {\n\n\t\t\tthrow new Error( 'THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.' );\n\n\t\t}\n\n\t\tconst loader = new FileLoader( this.manager );\n\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tconst texture = new CompressedTexture();\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t\t// again from this thread.\n\t\t\tif ( _taskCache.has( buffer ) ) {\n\n\t\t\t\tconst cachedTask = _taskCache.get( buffer );\n\n\t\t\t\treturn cachedTask.promise.then( onLoad ).catch( onError );\n\n\t\t\t}\n\n\t\t\tthis._createTexture( [ buffer ] )\n\t\t\t\t.then( function ( _texture ) {\n\n\t\t\t\t\ttexture.copy( _texture );\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t} )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n\t_createTextureFrom( transcodeResult ) {\n\n\t\tconst { mipmaps, width, height, format, type, error, dfdTransferFn, dfdFlags } = transcodeResult;\n\n\t\tif ( type === 'error' ) return Promise.reject( error );\n\n\t\tconst texture = new CompressedTexture( mipmaps, width, height, format, UnsignedByteType );\n\t\ttexture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n\t\ttexture.magFilter = LinearFilter;\n\t\ttexture.generateMipmaps = false;\n\t\ttexture.needsUpdate = true;\n\t\ttexture.encoding = dfdTransferFn === KTX2TransferSRGB ? sRGBEncoding : LinearEncoding;\n\t\ttexture.premultiplyAlpha = !! ( dfdFlags & KTX2_ALPHA_PREMULTIPLIED );\n\n\t\treturn texture;\n\n\t}\n\n\t/**\n\t * @param {ArrayBuffer[]} buffers\n\t * @param {object?} config\n\t * @return {Promise<CompressedTexture>}\n\t */\n\t_createTexture( buffers, config = {} ) {\n\n\t\tconst taskConfig = config;\n\t\tconst texturePending = this.init().then( () => {\n\n\t\t\treturn this.workerPool.postMessage( { type: 'transcode', buffers, taskConfig: taskConfig }, buffers );\n\n\t\t} ).then( ( e ) => this._createTextureFrom( e.data ) );\n\n\t\t// Cache the task result.\n\t\t_taskCache.set( buffers[ 0 ], { promise: texturePending } );\n\n\t\treturn texturePending;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.workerPool.dispose();\n\t\tif ( this.workerSourceURL ) URL.revokeObjectURL( this.workerSourceURL );\n\n\t\t_activeLoaders --;\n\n\t\treturn this;\n\n\t}\n\n}\n\n\n/* CONSTANTS */\n\nKTX2Loader.BasisFormat = {\n\tETC1S: 0,\n\tUASTC_4x4: 1,\n};\n\nKTX2Loader.TranscoderFormat = {\n\tETC1: 0,\n\tETC2: 1,\n\tBC1: 2,\n\tBC3: 3,\n\tBC4: 4,\n\tBC5: 5,\n\tBC7_M6_OPAQUE_ONLY: 6,\n\tBC7_M5: 7,\n\tPVRTC1_4_RGB: 8,\n\tPVRTC1_4_RGBA: 9,\n\tASTC_4x4: 10,\n\tATC_RGB: 11,\n\tATC_RGBA_INTERPOLATED_ALPHA: 12,\n\tRGBA32: 13,\n\tRGB565: 14,\n\tBGR565: 15,\n\tRGBA4444: 16,\n};\n\nKTX2Loader.EngineFormat = {\n\tRGBAFormat: RGBAFormat,\n\tRGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n\tRGBA_BPTC_Format: RGBA_BPTC_Format,\n\tRGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n\tRGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n\tRGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n\tRGB_ETC1_Format: RGB_ETC1_Format,\n\tRGB_ETC2_Format: RGB_ETC2_Format,\n\tRGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n\tRGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format,\n};\n\n\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n\n\tlet config;\n\tlet transcoderPending;\n\tlet BasisModule;\n\n\tconst EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\tconst TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\tconst BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n\tself.addEventListener( 'message', function ( e ) {\n\n\t\tconst message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tconfig = message.config;\n\t\t\t\tinit( message.transcoderBinary );\n\t\t\t\tbreak;\n\n\t\t\tcase 'transcode':\n\t\t\t\ttranscoderPending.then( () => {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tconst { width, height, hasAlpha, mipmaps, format, dfdTransferFn, dfdFlags } = transcode( message.buffers[ 0 ] );\n\n\t\t\t\t\t\tconst buffers = [];\n\n\t\t\t\t\t\tfor ( let i = 0; i < mipmaps.length; ++ i ) {\n\n\t\t\t\t\t\t\tbuffers.push( mipmaps[ i ].data.buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself.postMessage( { type: 'transcode', id: message.id, width, height, hasAlpha, mipmaps, format, dfdTransferFn, dfdFlags }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t} );\n\n\tfunction init( wasmBinary ) {\n\n\t\ttranscoderPending = new Promise( ( resolve ) => {\n\n\t\t\tBasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n\t\t\tBASIS( BasisModule ); // eslint-disable-line no-undef\n\n\t\t} ).then( () => {\n\n\t\t\tBasisModule.initializeBasis();\n\n\t\t\tif ( BasisModule.KTX2File === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.KTX2Loader: Please update Basis Universal transcoder.' );\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tfunction transcode( buffer ) {\n\n\t\tconst ktx2File = new BasisModule.KTX2File( new Uint8Array( buffer ) );\n\n\t\tfunction cleanup() {\n\n\t\t\tktx2File.close();\n\t\t\tktx2File.delete();\n\n\t\t}\n\n\t\tif ( ! ktx2File.isValid() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file' );\n\n\t\t}\n\n\t\tconst basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n\t\tconst width = ktx2File.getWidth();\n\t\tconst height = ktx2File.getHeight();\n\t\tconst levels = ktx2File.getLevels();\n\t\tconst hasAlpha = ktx2File.getHasAlpha();\n\t\tconst dfdTransferFn = ktx2File.getDFDTransferFunc();\n\t\tconst dfdFlags = ktx2File.getDFDFlags();\n\n\t\tconst { transcoderFormat, engineFormat } = getTranscoderFormat( basisFormat, width, height, hasAlpha );\n\n\t\tif ( ! width || ! height || ! levels ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.KTX2Loader:\tInvalid texture' );\n\n\t\t}\n\n\t\tif ( ! ktx2File.startTranscoding() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.KTX2Loader: .startTranscoding failed' );\n\n\t\t}\n\n\t\tconst mipmaps = [];\n\n\t\tfor ( let mip = 0; mip < levels; mip ++ ) {\n\n\t\t\tconst levelInfo = ktx2File.getImageLevelInfo( mip, 0, 0 );\n\t\t\tconst mipWidth = levelInfo.origWidth;\n\t\t\tconst mipHeight = levelInfo.origHeight;\n\t\t\tconst dst = new Uint8Array( ktx2File.getImageTranscodedSizeInBytes( mip, 0, 0, transcoderFormat ) );\n\n\t\t\tconst status = ktx2File.transcodeImage(\n\t\t\t\tdst,\n\t\t\t\tmip,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\ttranscoderFormat,\n\t\t\t\t0,\n\t\t\t\t- 1,\n\t\t\t\t- 1,\n\t\t\t);\n\n\t\t\tif ( ! status ) {\n\n\t\t\t\tcleanup();\n\t\t\t\tthrow new Error( 'THREE.KTX2Loader: .transcodeImage failed.' );\n\n\t\t\t}\n\n\t\t\tmipmaps.push( { data: dst, width: mipWidth, height: mipHeight } );\n\n\t\t}\n\n\t\tcleanup();\n\n\t\treturn { width, height, hasAlpha, mipmaps, format: engineFormat, dfdTransferFn, dfdFlags };\n\n\t}\n\n\t//\n\n\t// Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n\t// device capabilities, and texture dimensions. The list below ranks the formats separately\n\t// for ETC1S and UASTC.\n\t//\n\t// In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n\t// significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n\t// chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\tconst FORMAT_OPTIONS = [\n\t\t{\n\t\t\tif: 'astcSupported',\n\t\t\tbasisFormat: [ BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4 ],\n\t\t\tengineFormat: [ EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format ],\n\t\t\tpriorityETC1S: Infinity,\n\t\t\tpriorityUASTC: 1,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'bptcSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5 ],\n\t\t\tengineFormat: [ EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format ],\n\t\t\tpriorityETC1S: 3,\n\t\t\tpriorityUASTC: 2,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'dxtSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.BC1, TranscoderFormat.BC3 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format ],\n\t\t\tpriorityETC1S: 4,\n\t\t\tpriorityUASTC: 5,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'etc2Supported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ETC1, TranscoderFormat.ETC2 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format ],\n\t\t\tpriorityETC1S: 1,\n\t\t\tpriorityUASTC: 3,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'etc1Supported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.ETC1 ],\n\t\t\tengineFormat: [ EngineFormat.RGB_ETC1_Format ],\n\t\t\tpriorityETC1S: 2,\n\t\t\tpriorityUASTC: 4,\n\t\t\tneedsPowerOfTwo: false,\n\t\t},\n\t\t{\n\t\t\tif: 'pvrtcSupported',\n\t\t\tbasisFormat: [ BasisFormat.ETC1S, BasisFormat.UASTC_4x4 ],\n\t\t\ttranscoderFormat: [ TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA ],\n\t\t\tengineFormat: [ EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format ],\n\t\t\tpriorityETC1S: 5,\n\t\t\tpriorityUASTC: 6,\n\t\t\tneedsPowerOfTwo: true,\n\t\t},\n\t];\n\n\tconst ETC1S_OPTIONS = FORMAT_OPTIONS.sort( function ( a, b ) {\n\n\t\treturn a.priorityETC1S - b.priorityETC1S;\n\n\t} );\n\tconst UASTC_OPTIONS = FORMAT_OPTIONS.sort( function ( a, b ) {\n\n\t\treturn a.priorityUASTC - b.priorityUASTC;\n\n\t} );\n\n\tfunction getTranscoderFormat( basisFormat, width, height, hasAlpha ) {\n\n\t\tlet transcoderFormat;\n\t\tlet engineFormat;\n\n\t\tconst options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n\t\tfor ( let i = 0; i < options.length; i ++ ) {\n\n\t\t\tconst opt = options[ i ];\n\n\t\t\tif ( ! config[ opt.if ] ) continue;\n\t\t\tif ( ! opt.basisFormat.includes( basisFormat ) ) continue;\n\t\t\tif ( hasAlpha && opt.transcoderFormat.length < 2 ) continue;\n\t\t\tif ( opt.needsPowerOfTwo && ! ( isPowerOfTwo( width ) && isPowerOfTwo( height ) ) ) continue;\n\n\t\t\ttranscoderFormat = opt.transcoderFormat[ hasAlpha ? 1 : 0 ];\n\t\t\tengineFormat = opt.engineFormat[ hasAlpha ? 1 : 0 ];\n\n\t\t\treturn { transcoderFormat, engineFormat };\n\n\t\t}\n\n\t\tconsole.warn( 'THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.' );\n\n\t\ttranscoderFormat = TranscoderFormat.RGBA32;\n\t\tengineFormat = EngineFormat.RGBAFormat;\n\n\t\treturn { transcoderFormat, engineFormat };\n\n\t}\n\n\tfunction isPowerOfTwo( value ) {\n\n\t\tif ( value <= 2 ) return true;\n\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t}\n\n};\n\nexport { KTX2Loader };\n"],
  "mappings": "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",
  "names": []
}
